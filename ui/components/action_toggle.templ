package components

import (
	"fmt"
	"github.com/Zeglius/yafti-go/config"
	"github.com/labstack/gommon/log"
	"regexp"
	"strings"
)

templ ActionToggle(action config.Action) {
	{{
		if action.ID == "" {
			panic(fmt.Sprintf("action ID is empty: %v", action))
		} else if action.Title == "" {
			panic(fmt.Sprintf("action title is empty: %v", action))
		} else if action.Description == "" {
			log.Warnf("action description is empty: %v", action)
		}
	}}
	<div class="bg-white border border-gray-200 rounded-lg mb-3 overflow-hidden">
		<div class="flex items-center p-4">
			<div class="flex-1">
				<div class="flex items-center">
					<h3 class="text-lg font-semibold">{ action.Title }</h3>
					{{
						dataScript := fmt.Sprintf(
							`set :id to '%s'
							on click
								set :old to cookies[:id]
								if cookies[:id] == 'true' then
									remove @checked then set cookies[:id] to 'false'
								else
									add @checked then set cookies[:id] to 'true'
								end
								log "cookies[" + :id + "]: " + :old + " => " + cookies[:id]
							end
							on load if cookies[:id] == 'true' then add @checked else remove @checked end`,
							action.ID,
						)
						// Replace newlines and spaces in dataScript with spaces
						dataScript = regexp.MustCompile(`\n`).ReplaceAllString(dataScript, " ")
						dataScript = regexp.MustCompile(`\s{2,}`).ReplaceAllString(dataScript, " ")
					}}
					<div class="ml-auto">
						if action.Default {
							<input type="checkbox" name="script_ids" value={ action.ID } data-script={ dataScript } class="toggle toggle-primary" checked/>
						} else {
							<input type="checkbox" name="script_ids" value={ action.ID } data-script={ dataScript } class="toggle toggle-primary"/>
						}
					</div>
				</div>
				<p class="text-gray-600 text-sm mt-1">{ action.Description }</p>
				
				<details class="mt-2">
					<summary class="text-sm text-violet-600 cursor-pointer hover:text-violet-800">View script</summary>
					<div class="mt-2 bg-gray-100 p-3 rounded text-xs font-mono overflow-x-auto">
						for _, line := range strings.Split(action.Script, "\n") {
							<div>{ line }</div>
						}
					</div>
				</details>
			</div>
		</div>
	</div>
}
